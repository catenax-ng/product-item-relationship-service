@startuml
skinparam shadowing false

actor APIConsumer

autonumber "<b>[000]"

box "Consumer" #LightGrey
participant ApiEndpointExtension
activate WebService
ApiEndpointExtension -> WebService: new()
ApiEndpointExtension -> ConsumerApiController: new()
activate ConsumerApiController
ApiEndpointExtension -> ConsumerService: new()



activate ConsumerService
ApiEndpointExtension -> JobOrchestrator: new()
activate JobOrchestrator


ApiEndpointExtension -> InMemoryJobStore: new()
activate InMemoryJobStore
ApiEndpointExtension ->  ItemGraphRecursiveLogic: new()
activate ItemGraphRecursiveLogic
ApiEndpointExtension ->  DataRequestFactory: new()
activate DataRequestFactory
participant ItemGraphRecursiveJobHandler
participant TransferProcessManager
database Blobstore

WebService -> ConsumerApiController: register (monitor, service, middleware)

APIConsumer -> ConsumerApiController: retrieveItemGraph
ConsumerApiController -> ConsumerService : retrieveItemGraph(request)
ConsumerService -> Blobstore : createContainer(storageAccountName, UUID)
ConsumerService <- Blobstore : success
note over ConsumerService
startJob -> JobOrchestrator
end note
ConsumerService -> JobOrchestrator: startJob(aasId, BlobstoreContainer, destinationKey)
JobOrchestrator -> InMemoryJobStore: create(Job)


InMemoryJobStore -> InMemoryJobStore: create(job)
JobOrchestrator -> ItemGraphRecursiveJobHandler: initiate(Job)
ItemGraphRecursiveJobHandler -> ItemGraphRecursiveJobHandler: initiate(Job)
ItemGraphRecursiveJobHandler -> ItemGraphRecursiveJobHandler: getItemGraphRequest(Job)
ItemGraphRecursiveJobHandler -> InMemoryJobStore : get(jobRequest)


ItemGraphRecursiveJobHandler -> ItemGraphRecursiveLogic : createInitialItemGraphRequest(request)
ItemGraphRecursiveJobHandler -> DataRequestFactory :createRequest
DataRequestFactory -> DataRequestFactory: getRequestFromRegistry or Endpoint
DataRequestFactory --> Blobstore: store request in Blobstore
ItemGraphRecursiveJobHandler <-- DataRequestFactory: Stream<DataRequest>
JobOrchestrator <-- ItemGraphRecursiveJobHandler: Stream<DataRequest>
loop over  Stream<DataRequest>
    JobOrchestrator -> JobOrchestrator: startTransfer
    ref over JobOrchestrator, TransferProcessManager
        TransferProcessManager: initiateConsumerRequest(dataRequest)
    end ref
    JobOrchestrator --> InMemoryJobStore: addTransferProcess
end loop
ItemGraphRecursiveJobHandler -> ItemGraphRecursiveJobHandler:startTransfers
note over ItemGraphRecursiveJobHandler
    Some other stuff
end note
JobOrchestrator --> InMemoryJobStore: (completeTransferProcess)
JobOrchestrator <-- InMemoryJobStore: success
ConsumerService <-- JobOrchestrator:  return JobInitiateResponse
ConsumerApiController <-- ConsumerService:  return JobInitiateResponse
APIConsumer <-- ConsumerApiController: 200 (jobId)

note over APIConsumer
    returns FATAL_ERROR in case of any Exception during processing
end note
APIConsumer <-- ConsumerApiController: FATAL_ERROR (jobId)


@enduml