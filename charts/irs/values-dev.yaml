springprofile: dev

image:
  tag: $ARGOCD_APP_REVISION

ingress:
  hosts:
    - host: "irs.dev.demo.catena-x.net"
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls:
    - hosts:
        - "irs.dev.demo.catena-x.net"
      # Default secret for certificate creation already provided to your namespace
      secretName: tls-secret

keycloak:
  oauth2:
    clientId: <path:traceability-irs/data/dev/keycloak/oauth2#clientId>
    clientSecret: <path:traceability-irs/data/dev/keycloak/oauth2#clientSecret>
    clientTokenUri: <path:traceability-irs/data/dev/keycloak/oauth2#tokenUri>
    jwkSetUri: <path:traceability-irs/data/dev/keycloak/oauth2#jwkSetUri>

aasWrapper:
  host: http://irs-irs-aaswrapper:9191/api/service
  username: <path:traceability-irs/data/dev/aasProxy/submodel#username>
  password: <path:traceability-irs/data/dev/aasProxy/submodel#password>

minio:
  url: http://irs-irs-minio:9000

rootUser: <path:traceability-irs/data/dev/minio#minioUser>
rootPassword: <path:traceability-irs/data/dev/minio#minioPassword>

digitalTwinRegistry:
  url: https://irs-aas-registry.dev.demo.catena-x.net

global:
  enablePrometheus: true
  enableGrafana: true

# Values for aas wrapper subchart.
irs-aaswrapper:
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/ssl-passthrough: "false"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    hosts:
      - host: "irs-aas-wrapper.dev.demo.catena-x.net"
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: aaswrapper
                port:
                  number: 9191
    tls:
      - hosts:
          - "irs-aas-wrapper.dev.demo.catena-x.net"
        # Default secret for certificate creation already provided to your namespace
        secretName: tls-secret

  configuration:
    properties: |-
      web.http.port=9191
      web.http.path=/api
      web.http.callback.port=9192
      web.http.callback.path=/callback
      wrapper.consumer.edc.datamanagement.url=http://irs-consumer-controlplane:8181/data
      wrapper.consumer.edc.control.url=http://irs-consumer-controlplane:9999/api/controlplane/control
      wrapper.consumer.edc.apikey.name=X-Api-Key
      wrapper.consumer.edc.apikey.value=123456
      wrapper.callback.timeout=60
      wrapper.cache.enabled=true
      # wrapper.auth.basic.someuser=somepassword

# Values for grafana subchart.
irs-grafana:
  username: <path:traceability-irs/data/int/grafana#username>
  password: <path:traceability-irs/data/int/grafana#password>

  ingress:
    hosts:
      - host: "irs-grafana.dev.demo.catena-x.net"
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls:
      - hosts:
          - "irs-grafana.dev.demo.catena-x.net"
        # Default secret for certificate creation already provided to your namespace
        secretName: tls-secret
  config:
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        url: http://irs-irs-prometheus:9090
        isDefault: true

  oauthClientId: <path:traceability-irs/data/dev/grafana#oauthClientId>
  oauthClientSecret: <path:traceability-irs/data/dev/grafana#oauthClientSecret>

  configEnvs:
    - name: GF_SERVER_ROOT_URL
      value: 'https://irs-grafana.dev.demo.catena-x.net'
    - name: GF_AUTH_GITHUB_ENABLED
      value: 'true'
    - name: GF_AUTH_GITHUB_ALLOW_SIGN_UP
      value: 'true'
    - name: GF_AUTH_GITHUB_TEAM_IDS
      value: '5783013'
    - name: GF_AUTH_GITHUB_SCOPES
      value: 'user:email,read:org'
    - name: GF_AUTH_GITHUB_AUTH_URL
      value: 'https://github.com/login/oauth/authorize'
    - name: GF_AUTH_GITHUB_TOKEN_URL
      value: 'https://github.com/login/oauth/access_token'
    - name: GF_AUTH_GITHUB_API_URL
      value: 'https://api.github.com/user'

# Values for prometheus subchart.
irs-prometheus:
  config:
    global:
      scrape_interval: 15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
      evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
      # scrape_timeout is set to the global default (10s).

    # Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
    rule_files:
    # - "first_rules.yml"
    # - "second_rules.yml"

    # A scrape configuration containing exactly one endpoint to scrape:
    # Here it's Prometheus itself.
    scrape_configs:
      # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
      - job_name: 'prometheus'
        # metrics_path defaults to '/metrics'
        # scheme defaults to 'http'.
        static_configs:
          - targets: [ '127.0.0.1:9090' ]

      - job_name: 'spring-actuator'
        metrics_path: '/actuator/prometheus'
        scrape_interval: 5s
        static_configs:
          - targets: [ 'irs:4004' ]

      - job_name: 'minio-actuator'
        metrics_path: /minio/v2/metrics/cluster
        static_configs:
          - targets: [ 'irs-irs-minio:9000' ]

# Values for minio subchart.
irs-minio:
  rootUser: <path:traceability-irs/data/dev/minio#minioUser>
  rootPassword: <path:traceability-irs/data/dev/minio#minioPassword>

  ## Path where PV would be mounted on the MinIO Pod
  mountPath: "/data"

  ## Enable persistence using Persistent Volume Claims
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    enabled: false

# Values for consumer edc-controlplane.
edc-controlplane:
  # -- Overrides the charts name
  nameOverride: "irs-consumer-controlplane"
  # -- Overrides the releases full name
  fullnameOverride: "irs-consumer-controlplane"

  ## Ingress declaration to expose the network service.
  ingresses:
    ## Public / Internet facing Ingress
    - enabled: true
      # -- The hostname to be used to precisely map incoming traffic onto the underlying network service
      hostname: "irs-consumer-controlplane.dev.demo.catena-x.net"
      # -- Additional ingress annotations to add
      annotations: { }
      # -- EDC endpoints exposed by this ingress resource
      endpoints:
        - ids
        - data
      # -- Defines the [ingress class](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class)  to use
      className: ""
      # -- Enables TLS on the ingress resource
      tls:
        - hosts:
            - "irs-consumer-controlplane.dev.demo.catena-x.net"
          # Default secret for certificate creation already provided to your namespace
          secretName: tls-secret
      ## Adds [cert-manager](https://cert-manager.io/docs/) annotations to the ingress resource
      certManager:
        # -- If preset enables certificate generation via cert-manager namespace scoped issuer
        issuer: ""
        # -- If preset enables certificate generation via cert-manager cluster-wide issuer
        clusterIssuer: ""

  configuration:
    # -- EDC configuration.properties configuring aspects of the [eclipse-dataspaceconnector](https://github.com/eclipse-dataspaceconnector/DataSpaceConnector)
    properties: |-
      edc.api.auth.key=123456

      ids.webhook.address=https://irs-consumer-controlplane.dev.demo.catena-x.net

      edc.ids.id=urn:connector:edc-consumer-controlplane
      edc.ids.catalog.id=urn:catalog:default
      edc.ids.endpoint=https://irs-consumer-controlplane.dev.demo.catena-x.net/api/v1/ids
      edc.ids.endpoint.audience=https://irs-consumer-controlplane.dev.demo.catena-x.net/api/v1/ids/data

      edc.receiver.http.endpoint=http://irs-irs-aaswrapper:9192/callback/endpoint-data-reference

      edc.transfer.dataplane.sync.endpoint=http://irs-consumer-dataplane:8185/api/public
      edc.transfer.proxy.endpoint=https://irs-consumer-dataplane.dev.demo.catena-x.net/api/public
      edc.transfer.proxy.token.signer.privatekey.alias=irs-dev-daps-cert-consumer-key
      edc.transfer.proxy.token.verifier.publickey.alias=irs-dev-daps-cert-consumer

      edc.dataplane.selector.consumer.url=http://irs-consumer-dataplane:9999/api/dataplane/control
      edc.dataplane.selector.consumer.sourcetypes=HttpData
      edc.dataplane.selector.consumer.destinationtypes=HttpProxy
      edc.dataplane.selector.consumer.properties={ "publicApiUrl": "http://irs-consumer-dataplane:8185/api/public" }

      edc.oauth.client.id=4D:BE:65:C0:E8:F7:CB:09:FD:43:67:16:EF:68:F1:62:D8:B2:08:90:keyid:4D:BE:65:C0:E8:F7:CB:09:FD:43:67:16:EF:68:F1:62:D8:B2:08:90
      edc.oauth.private.key.alias=irs-dev-daps-cert-consumer-key
      edc.oauth.provider.audience=idsc:IDS_CONNECTORS_ALL
      edc.oauth.provider.jwks.url=https://daps-irs.dev.demo.catena-x.net/.well-known/jwks.json
      edc.oauth.public.key.alias=irs-dev-daps-cert-consumer
      edc.oauth.token.url=https://daps-irs.dev.demo.catena-x.net/token

      edc.vault.hashicorp.url=https://vault.demo.catena-x.net
      edc.vault.hashicorp.token=<path:traceability-irs/data/dev/controlplane#vaultToken>
      edc.vault.hashicorp.timeout.seconds=30
      edc.vault.hashicorp.health.check.enabled=true
      edc.vault.hashicorp.health.check.standby.ok=true
      edc.vault.hashicorp.api.secret.path=/v1/traceability-irs

      edc.data.encryption.keys.alias=irs-dev-daps-cert-consumer-key
      edc.data.encryption.algorithm=NONE

      # Postgresql related configuration
      edc.datasource.asset.name=asset
      edc.datasource.asset.url=jdbc:postgresql://irs-postgresql-hl:5432/edc
      edc.datasource.asset.user=<path:traceability-irs/data/dev/controlplane#databaseuser>
      edc.datasource.asset.password=<path:traceability-irs/data/dev/controlplane#databasepassword>
      edc.datasource.contractdefinition.name=contractdefinition
      edc.datasource.contractdefinition.url=jdbc:postgresql://irs-postgresql-hl:5432/edc
      edc.datasource.contractdefinition.user=<path:traceability-irs/data/dev/controlplane#databaseuser>
      edc.datasource.contractdefinition.password=<path:traceability-irs/data/dev/controlplane#databasepassword>
      edc.datasource.contractnegotiation.name=contractnegotiation
      edc.datasource.contractnegotiation.url=jdbc:postgresql://irs-postgresql-hl:5432/edc
      edc.datasource.contractnegotiation.user=<path:traceability-irs/data/dev/controlplane#databaseuser>
      edc.datasource.contractnegotiation.password=<path:traceability-irs/data/dev/controlplane#databasepassword>
      edc.datasource.policy.name=policy
      edc.datasource.policy.url=jdbc:postgresql://irs-postgresql-hl:5432/edc
      edc.datasource.policy.user=<path:traceability-irs/data/dev/controlplane#databaseuser>
      edc.datasource.policy.password=<path:traceability-irs/data/dev/controlplane#databasepassword>
      edc.datasource.transferprocess.name=transferprocess
      edc.datasource.transferprocess.url=jdbc:postgresql://irs-postgresql-hl:5432/edc
      edc.datasource.transferprocess.user=<path:traceability-irs/data/dev/controlplane#databaseuser>
      edc.datasource.transferprocess.password=<path:traceability-irs/data/dev/controlplane#databasepassword>

# Values for consumer edc-dataplane.
edc-dataplane:
  # -- Overrides the charts name
  nameOverride: "irs-consumer-dataplane"
  # -- Overrides the releases full name
  fullnameOverride: "irs-consumer-dataplane"

  ## Ingress declaration to expose the network service.
  ingresses:
    ## Public / Internet facing Ingress
    - enabled: true
      # -- The hostname to be used to precisely map incoming traffic onto the underlying network service
      hostname: "irs-consumer-dataplane.dev.demo.catena-x.net"
      # -- Additional ingress annotations to add
      annotations:
        nginx.ingress.kubernetes.io/ssl-passthrough: "false"
        nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
        nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
      # -- EDC endpoints exposed by this ingress resource
      endpoints:
        - public
      # -- Defines the [ingress class](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class)  to use
      className: "nginx"
      # -- Enables TLS on the ingress resource
      tls:
        - hosts:
            - "irs-consumer-dataplane.dev.demo.catena-x.net"
          # Default secret for certificate creation already provided to your namespace
          secretName: tls-secret
      ## Adds [cert-manager](https://cert-manager.io/docs/) annotations to the ingress resource
      certManager:
        # -- If preset enables certificate generation via cert-manager namespace scoped issuer
        issuer: ""
        # -- If preset enables certificate generation via cert-manager cluster-wide issuer
        clusterIssuer: ""

  configuration:
    # -- EDC configuration.properties configuring aspects of the [eclipse-dataspaceconnector](https://github.com/eclipse-dataspaceconnector/DataSpaceConnector)
    properties: |-
      edc.api.auth.key=123456

      edc.dataplane.token.validation.endpoint=http://irs-consumer-controlplane:8182/validation/token

      edc.receiver.http.endpoint=http://irs-irs-aaswrapper:9192/callback

      edc.oauth.client.id=4D:BE:65:C0:E8:F7:CB:09:FD:43:67:16:EF:68:F1:62:D8:B2:08:90:keyid:4D:BE:65:C0:E8:F7:CB:09:FD:43:67:16:EF:68:F1:62:D8:B2:08:90
      edc.oauth.private.key.alias=irs-dev-daps-cert-consumer-key
      edc.oauth.provider.audience=idsc:IDS_CONNECTORS_ALL
      edc.oauth.provider.jwks.url=https://daps-irs.dev.demo.catena-x.net/.well-known/jwks.json
      edc.oauth.public.key.alias=irs-dev-daps-cert-consumer
      edc.oauth.token.url=https://daps-irs.dev.demo.catena-x.net/token

      edc.vault.hashicorp.url=https://vault.demo.catena-x.net
      edc.vault.hashicorp.token=<path:traceability-irs/data/dev/controlplane#vaultToken>
      edc.vault.hashicorp.timeout.seconds=30
      edc.vault.hashicorp.health.check.enabled=true
      edc.vault.hashicorp.health.check.standby.ok=true
      edc.vault.hashicorp.api.secret.path=/v1/traceability-irs

# Values for consumer edc postgres
postgresql:
  auth:
    postgresPassword: <path:traceability-irs/data/dev/controlplane#databasepassword>
    username: <path:traceability-irs/data/dev/controlplane#databaseuser>
    password: <path:traceability-irs/data/dev/controlplane#databasepassword>
    database: "edc"
