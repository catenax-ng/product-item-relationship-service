---
# Default values for edc-dataplane.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  ##
  ## Which edc-dataplane container image to use.
  ##
  repository: ghcr.io/catenax-ng/catenax-at-home/consumer-data-plane
  pullPolicy: IfNotPresent
  ##
  ## Overrides the image tag whose default is the chart appVersion.
  ##
  tag: ""

##
## Image pull secret to create to obtain the container image
## Note: 'imagePullSecret.dockerconfigjson' takes precedence if configured together with 'imagePullSecrets'
##
imagePullSecret:
  dockerconfigjson: ""

##
## Existing image pull secret to use to obtain the container image
##
imagePullSecrets: []

nameOverride: "edc-consumer-dataplane"
fullnameOverride: "edc-consumer-dataplane"

serviceAccount:
  ##
  ## Specifies whether a service account should be created per release
  ##
  create: true
  ##
  ## Annotations to add to the service account
  ##
  annotations: {}
  ##
  ## The name of the service account to use.
  ## If not set and create is true, a name is generated using the fullname template
  ##
  name: ""

podAnnotations: {}

podSecurityContext: {}
# fsGroup: 2000

securityContext:
  {}
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000

##
## Whether to enable kubernetes liveness-probes
##
livenessProbe:
  enabled: false

##
## Whether to enable kubernetes readiness-probes
##
readinessProbe:
  enabled: false

##
## Whether to enable kubernetes startup-probes
##
startupProbe:
  enabled: false

## EDC endpoints exposed by the data-plane
edc:
  endpoints:
    ## Default api exposing health checks etc
    default:
      # -- The network port, which the "default" api is going to be exposed by the container, pod and service
      port: "9191"
      # -- The path mapping the "default" api is going to be exposed by
      path: /api
    ## Public endpoint for data transfer
    public:
      # -- The network port, which the "public" api is going to be exposed by the container, pod and service
      port: "9192"
      # -- The path mapping the "public" api is going to be exposed by
      path: /api/public
    ## Prometheus endpoint
    metrics:
      # -- The network port, which the prometheus metrics are going to be exposed by the container, pod and service
      port: "8090"
      # -- The path mapping the prometheus metrics are going to be exposed at
      path: /metrics

##
## Service to expose the running application on a set of Pods as a network service.
##
service:
  type: ClusterIP
  port: 8185
##
## Ingress declaration to expose the network service.
##
ingresses:
  ## Public / Internet facing Ingress
  - enabled: false
    ##
    ## The hostname to be used to precisely map incoming traffic onto the underlying network service
    ##
    hostname: "irs-edc-provider.dev.demo.catena-x.net"
    ##
    ## Additional ingress annotations to add
    ##
    annotations: {}
    ##
    ## EDC endpoints exposed by this ingress resource
    ##
    endpoints:
      - public
    ##
    ## Defines the ingress class to use https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class
    ##
    className: ""
    ##
    ## Enables TLS on the ingress resource
    ##
    tls: false
    ##
    ## Adds cert-manager annotations to the ingress
    ##
    certManager:
      ##
      ## If preset enables certificate generation via cert-manager namespace scoped issuer
      ##
      issuer: ""
      ##
      ## If preset enables certificate generation via cert-manager cluster-wide issuer
      ##
      clusterIssuer: ""

resources:
  {}
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

##
## Container environment variables
##   e.g. for configuring JAVA_TOOL_OPTIONS (see: https://docs.oracle.com/javase/8/docs/technotes/guides/troubleshoot/envvars002.html)
##
##   JAVA_TOOL_OPTIONS: >
##     -Dhttp.proxyHost=proxy -Dhttp.proxyPort=80 -Dhttp.nonProxyHosts="localhost|127.*|[::1]" -Dhttps.proxyHost=proxy -Dhttps.proxyPort=443
##
env:
  EDC_FS_CONFIG: /app/configuration.properties

##
## EDC logging.properties configuring the java.util.logging subsystem
##
logging:
  properties: |-
    .level=INFO
    org.eclipse.dataspaceconnector.level=ALL
    handlers=java.util.logging.ConsoleHandler
    java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
    java.util.logging.ConsoleHandler.level=ALL
    java.util.logging.SimpleFormatter.format=[%1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS] [%4$-7s] %5$s%6$s%n

##
## opentelemetry.properties configuring the opentelemetry agent
##
## See https://opentelemetry.io/docs/instrumentation/java/automatic/agent-config/ for further configuration options
##
opentelemetry:
  properties: |-
    otel.javaagent.enabled=true
    otel.javaagent.debug=false

##
## EDC configuration.properties
##
## Consult the eclipse-dataspaceconnector documentation for further details: https://github.com/eclipse-dataspaceconnector/DataSpaceConnector
##
configuration:
  properties: |-
    web.http.port=9191
    web.http.path=/api
    
    web.http.public.port=9192
    web.http.public.path=/public
    
    web.http.control.port=9193
    web.http.control.path=/control
    
    edc.controlplane.validation-endpoint=http://edc-consumer-controlplane:9192/validation/validation


     
    
